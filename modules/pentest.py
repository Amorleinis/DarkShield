import streamlit as st
import pandas as pd
from utils import exploit_db

def show_pentest():
    st.header("Penetration Testing Suite")
    
    # System Selection
    st.subheader("Target System Configuration")
    system_type = st.selectbox(
        "Select System Type",
        ["Web Application", "Network Service", "Operating System", "Database"]
    )
    
    # Vulnerability Categories
    st.subheader("Vulnerability Categories")
    vuln_categories = st.multiselect(
        "Select Categories to Test",
        ["SQL Injection", "Remote Code Execution", "Buffer Overflow", 
         "Cross-Site Scripting", "Authentication Bypass"]
    )
    
    # Test Configuration
    with st.expander("Test Configuration"):
        test_depth = st.slider("Test Depth", 1, 5, 3)
        safe_mode = st.checkbox("Safe Mode (No actual exploitation)", value=True)
        
    # Run Test Button
    if st.button("Run Penetration Test"):
        with st.spinner("Running security tests..."):
            results = run_pentest(system_type, vuln_categories, test_depth, safe_mode)
            display_results(results)

def run_pentest(system_type, categories, depth, safe_mode):
    # Get relevant exploits from the database
    exploits = exploit_db.get_recent_exploits()
    
    if not exploits:
        return {
            "status": "error",
            "message": "Could not fetch exploit data",
            "findings": []
        }
    
    # Filter exploits based on system type and categories
    filtered_exploits = [
        exploit for exploit in exploits
        if any(cat.lower() in exploit[1].lower() for cat in categories)
    ]
    
    return {
        "status": "completed",
        "system_type": system_type,
        "total_tests": len(filtered_exploits),
        "findings": filtered_exploits[:5],  # Limit to top 5 most relevant findings
        "safe_mode": safe_mode
    }

def display_results(results):
    if results["status"] == "error":
        st.error(results["message"])
        return
        
    st.success(f"Penetration Test Completed - {results['total_tests']} tests performed")
    
    # Display findings in a clean table
    if results["findings"]:
        st.subheader("Potential Vulnerabilities Found")
        df = pd.DataFrame(results["findings"], 
                         columns=["ID", "Title", "Type", "Platform", "Date"])
        st.dataframe(df)
        
        # Recommendations
        st.subheader("Recommendations")
        for finding in results["findings"]:
            with st.expander(f"Mitigation for {finding[1]}"):
                st.write("• Update affected components to latest version")
                st.write("• Apply security patches if available")
                st.write("• Review and harden security configurations")
